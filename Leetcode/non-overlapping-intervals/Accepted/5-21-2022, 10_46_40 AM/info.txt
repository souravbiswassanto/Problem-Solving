{"id":703824792,"lang":"cpp","time":"3 weeks, 5 days","timestamp":1653108400,"status_display":"Accepted","runtime":"824 ms","url":"/submissions/detail/703824792/","is_pending":"Not Pending","title":"Non-overlapping Intervals","memory":"153 MB","code":"class Solution {\npublic:\n    vector<int> tree;\n    void update(int node, int b, int e, int idx, int val){\n        if(b > idx or e < idx)return;\n        if(b == e){\n            tree[node] = val;\n            return;\n        }\n        int mid = (b + e) / 2;\n        int left = node * 2;\n        int right = left + 1;\n        update(left, b, mid, idx, val);\n        update(right, mid + 1, e, idx, val);\n        tree[node] = max(tree[left], tree[right]);\n        //cout << \"Update \"<< endl;\n        //cout << b <<\" \" << e <<\" \"<< tree[node] << endl;\n    }\n    \n    int query(int node, int b, int e, int l, int r){\n        if(b > r or e < l)return 0;\n        if(b >= l and e <= r)return tree[node];\n        int mid = (b + e) / 2;\n        int left = node * 2;\n        int right = left + 1;\n        int L = query(left, b, mid, l, r);\n        int R = query(right, mid + 1, e, l, r);\n        //cout << b <<\" \" << e << endl;\n        //cout << L <<\" \" << R << \" \"<< left <<\" \"<<right << endl;\n        return max(L, R);\n    }\n    \n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        int Max = 0;\n        for(int i = 0; i < intervals.size(); i++){\n            Max = max(Max, intervals[i][1]);\n        }\n        Max += 50001; \n        Max++;\n        tree.resize(4 * Max, 0);\n        sort(intervals.begin(), intervals.end());\n        int n = intervals.size(); int ans = 0;\n        for(int i = n - 1; i >= 0; i--){\n            intervals[i][0] += 50001;\n            intervals[i][1] += 50001;\n            int res = query(1, 1, Max, intervals[i][1], Max);\n            ans = max(ans, res + 1);\n            //cout << intervals[i][0]<<\" \" << intervals[i][1]<<\" \" << res + 1 << endl;\n            \n            update(1, 1, Max, intervals[i][0], res + 1);\n            \n        }\n        return n - ans;\n        //[[1,2],[2,3],[3,4],[1,3]]\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"non-overlapping-intervals"}