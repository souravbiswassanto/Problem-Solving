{"id":723583241,"lang":"cpp","time":"19Â minutes","timestamp":1655375208,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/723583241/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"9.5 MB","code":"class Solution {\n#define ll long long\npublic:\n    \n    struct Manachar{\n    \n        int n;\n        vector<int> P;\n        Manachar(int _n){\n            n = _n;\n            P.resize(2 * n + 10, 0);\n        }\n\n        string convert(string& s){\n            string nwS = \"@\";\n            for (int i = 0; i < (int)s.size(); i++) {\n                nwS += \"#\" + s.substr(i, 1);\n            }\n            nwS += \"#$\";\n            return nwS;\n        }\n\n        void build(string& s){\n            int _n = s.size();\n            int l = 0, r = -1;\n            for(int i = 1; i < (int)s.size() - 1; i++){\n                int k;\n                if(i > r){\n                    k = 0;\n                }\n                else {\n                    int j = r - i + l;\n                    k = min (P[j], r - i);\n                }\n                while(i + k < _n and i - k >= 0 and s[i+k] == s[i-k])k++;\n                if(s[i-k] != s[i+k])k--;\n                P[i] = k;\n                if(i + k > r){\n                    r = i + k;\n                    l = i - k;\n                }\n            }\n        }\n        string calculate(string& s, string original){\n            int maxpal = 0;\n            int idx = 0;\n            for(int i = 1; i < s.size() - 1; i++){\n                //cout << i <<\" \"<< s[i]<<\" \"<< P[i] << endl;\n                if(P[i] > maxpal){\n                    maxpal = P[i];\n                    idx = i - P[i] ;\n                    idx /= 2;\n                }\n            }\n            //cout<<maxpal<<endl;\n            //cout<<idx<<endl;\n            string res = original.substr(idx,maxpal);\n            return res;\n        }\n\n        string solve(string& s){\n            string original = s;\n            s = convert(s);\n            build(s);\n            return calculate(s, original);\n        }\n    };\n    string longestPalindrome(string s) {\n        int n = s.size();\n        Manachar mchar(n);\n        return mchar.solve(s);\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring"}