{"id":719767999,"lang":"cpp","time":"1 month, 4 weeks","timestamp":1654964362,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/719767999/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int l, r;\n        l = 0, r = 0;\n        int mul = 1, smul, Max = INT_MIN;\n        for(int i = 0; i < nums.size(); i++){\n            Max = max(Max, nums[i]);\n        }\n        nums.push_back(0);\n        for(int i = 0; i < nums.size(); i++){\n            if(nums[i] == 0 and (i - l) > 1){\n                if(mul < 0){\n                    smul = 1; r = i - 1;\n                    while(r >= l and nums[r] >= 0){\n                        smul *= nums[r--];\n                    }\n                    smul *= nums[r];\n                    //cout << r << endl;\n                    if(r - l > 1)Max = max(Max, mul / smul);\n                    smul = 1;\n                    while(l <= i and nums[l] >= 0){\n                        smul *= nums[l++];\n                    }\n                    smul *= nums[l];\n                    if(i - l > 1)Max = max(Max, mul / smul);\n                }\n                if(mul >= 1 and (i - l) > 1)Max = max(mul, Max);\n                l = i + 1;\n                mul = 1;\n            }\n            else mul *= nums[i];\n        }\n        return Max;\n        \n    }\n};","compare_result":"11111111111111111111101111111111111110111111111111111111011111111111111011011111111111111111111111110111011111111011111111101011111000111111111101101111111011111010111111110101011001111111","title_slug":"maximum-product-subarray"}