{"id":757730852,"lang":"cpp","time":"1 week, 6 days","timestamp":1658889437,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/757730852/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"12.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        TreeNode* Last = NULL;\n        \n        function<void(TreeNode*)> dfsRightOrder = [&](TreeNode* cur){\n            if(cur == NULL)return;\n            dfsRightOrder(cur->right);\n            dfsRightOrder(cur->left);\n            if(Last != NULL)cur->right = Last;\n            Last = cur;\n            cur->left = NULL;\n        };\n        dfsRightOrder(root);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}