{"id":716579702,"lang":"cpp","time":"2Â months","timestamp":1654612600,"status_display":"Accepted","runtime":"70 ms","url":"/submissions/detail/716579702/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"16.6 MB","code":"class Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n        vector<pair<int, int>> v;\n        int n = nums.size();\n        int cnt[n + 4] ;\n        for(int i = 0; i < n; i++){\n            cnt[i] = 0;\n            for(int j = 0; j < nums[i].size(); j++){\n                v.push_back({nums[i][j], i});\n            }\n        }\n        sort(v.begin(), v.end()); vector<int> ans(2);\n        int a, b, l = 0, cntr = 0, res = INT_MAX;\n        for(int i = 0; i < v.size(); i++){\n            int val = v[i].first;\n            int Index = v[i].second;\n            if(cnt[Index] == 0)cntr++;\n            if(cntr == n){\n                a = i; break; \n            }\n            cnt[Index]++;\n        }\n        for(int i = a; i < v.size(); i++){\n            int val = v[i].second;\n            cnt[val]++;\n            while(l < i and cnt[v[l].second] > 1){\n                cnt[v[l].second]--;\n                l++;\n            }\n            if(res > v[i].first - v[l].first){\n                res = v[i].first - v[l].first;\n                ans[0] = v[l].first;\n                ans[1] = v[i].first;\n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists"}