{"id":723575053,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1655374202,"status_display":"Accepted","runtime":"350 ms","url":"/submissions/detail/723575053/","is_pending":"Not Pending","title":"Longest String Chain","memory":"50.9 MB","code":"class Solution {\npublic:\n    bool static compare(string &A, string &B){\n        return A.size() < B.size();\n    }\n    int longestStrChain(vector<string>& words) {\n        unordered_map<string, int> dp;\n        sort(words.begin(), words.end(), compare);\n        for(int i = 0; i < words.size(); i++){\n            dp[words[i]] = -1;\n        }\n        for(int i = words.size() - 1; i >= 0; i--){\n            if(words[i].size() == 1 and words[words.size() - 1].size() != 1)break;\n            if(dp[words[i]] == -1)dp[words[i]] = 1;\n            for(int j = 0; j < words[i].size(); j++){\n                string s = \"\";\n                for(int k = 0; k < words[i].size(); k++){\n                    if(j == k)continue;\n                    s += words[i][k];\n                }\n                if(s.size() == 0)continue;\n                dp[s] = max((int)dp[s], (int)dp[words[i]] + 1);\n            }\n        }\n        int Max = 0;\n        for(int i = 0; i < words.size(); i++){\n            //cout << words[i] <<\" \" << dp[words[i]] << endl;\n            Max = max(dp[words[i]], Max);\n        }\n        return Max;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-string-chain"}