{"id":719136887,"lang":"cpp","time":"1 month, 4 weeks","timestamp":1654892434,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/719136887/","is_pending":"Not Pending","title":"Maximum Non Negative Product in a Matrix","memory":"N/A","code":"class Solution {\npublic:\n    int maxProductPath(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int vis[n][m]; memset(vis, 0, sizeof vis);\n        pair<long long, long long> dp[n][m];\n        if(grid[0][0] == 0 or grid[n - 1][m - 1] == 0)return 0;\n        function <pair<long long, long long>(int, int)> bt = [&](int i, int j){\n            \n            if(i == n -1 and j == m - 1){\n                return make_pair(1LL * grid[i][j],1LL* grid[i][j]);\n            }\n            if(vis[i][j])return dp[i][j];\n            vis[i][j] = true;\n            pair<long long, long> F , S;\n            if(i < n - 1 and j < m - 1){\n                F = bt(i + 1, j);\n                dp[i][j].first = max(grid[i][j] * 1LL * F.first, grid[i][j] * 1LL * F.second);\n                dp[i][j].second = min(grid[i][j] * 1LL * F.first, grid[i][j] * 1LL * F.second);\n                S = bt(i, j + 1);\n                dp[i][j].first = max(dp[i][j].first, max(grid[i][j] * 1LL * S.first, grid[i][j] * 1LL * S.second));            \n                dp[i][j].second = min(dp[i][j].second, min(grid[i][j] * 1LL * S.first, grid[i][j] * 1LL * S.second));\n            } \n            else if(j < m - 1){\n                S = bt(i, j + 1);\n                dp[i][j].first = max(grid[i][j] * 1LL * S.first, grid[i][j] * 1LL * S.second);            \n                dp[i][j].second = min(grid[i][j] * 1LL * S.first, grid[i][j] * 1LL * S.second);\n            }\n            else if(i < m - 1){\n                F = bt(i + 1, j);\n                dp[i][j].first = max(grid[i][j] * 1LL * F.first, grid[i][j] * 1LL * F.second);\n                dp[i][j].second = min(grid[i][j] * 1LL * F.first, grid[i][j] * 1LL * F.second);\n            }\n            \n            return dp[i][j];\n        };\n        pair<long long, long long> ans = bt(0, 0);\n        if(ans.first < 0)return -1;\n        return ans.first % 1000000007;\n    }\n};","compare_result":"111110011111110110111111011001111111111111011111111111111111111111111011101111111111111111111111111111111111101111011111111111111111111111111111111011111111111","title_slug":"maximum-non-negative-product-in-a-matrix"}