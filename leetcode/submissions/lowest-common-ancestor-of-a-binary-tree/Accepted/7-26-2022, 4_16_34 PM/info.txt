{"id":757124641,"lang":"cpp","time":"2Â weeks","timestamp":1658830594,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/757124641/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"16.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        \n        TreeNode* answer; \n        bool isFoundBoth = false;\n        function<bool(TreeNode*)> dfs = [&](TreeNode* cur){\n            if (cur == NULL) return false;\n            bool isFoundP = false;\n            bool isFoundQ = false;\n            \n            isFoundP = dfs(cur->left);\n            isFoundQ = dfs(cur->right);\n    \n            if (isFoundP and isFoundQ) {\n                if (isFoundBoth == false) {\n                    isFoundBoth = true;\n                    answer = cur;\n                }\n            }\n            if((isFoundP | isFoundQ) and (cur == p or cur == q)){\n                if (isFoundBoth == false) {\n                    isFoundBoth = true;\n                    answer = cur;\n                }\n            }\n            if(p == cur or q == cur) return true;\n            return bool(isFoundP | isFoundQ);\n            \n        };\n        bool dummy = dfs(root);\n        return answer;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}