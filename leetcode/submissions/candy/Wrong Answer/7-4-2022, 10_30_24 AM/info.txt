{"id":737930027,"lang":"cpp","time":"1Â month","timestamp":1656909024,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/737930027/","is_pending":"Not Pending","title":"Candy","memory":"N/A","code":"class Solution {\npublic:\n    int candy(vector<int>& ratings) {\n        int n = ratings.size();\n        int maxFromLeft[n + 1];\n        int maxFromRight[n + 1];\n        int counter = 1; int reset = 1;\n        maxFromLeft[0] = maxFromRight[n - 1] = 0;\n        for(int i= 1; i < n; i++){\n            if(ratings[i] > ratings[i - 1]){\n                counter++;\n                maxFromLeft[i] = counter;\n            }\n            else{\n                counter = reset;\n                maxFromLeft[i] = 1;\n            }\n        }\n        counter = reset;\n        for(int i = n - 2; i >= 0; i--){\n            if(ratings[i] > ratings[i + 1]){\n                maxFromRight[i] = ++counter;\n            }\n            else{\n                counter = reset;\n                maxFromRight[i] = 1;\n            }\n        }\n        int minCandyNeeded = 0;\n        for(int i = 0; i < n; i++){\n            minCandyNeeded += max(maxFromLeft[i], maxFromRight[i]);\n        }\n        return minCandyNeeded;\n    }\n};","compare_result":"111111111111111111111101111111111111111111111111","title_slug":"candy"}