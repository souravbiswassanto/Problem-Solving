{"id":754364149,"lang":"cpp","time":"2 weeks, 3 days","timestamp":1658567642,"status_display":"Accepted","runtime":"288 ms","url":"/submissions/detail/754364149/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"101.3 MB","code":"#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n\ntemplate<class T> using oset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>; \n\nclass BIT {\n    public:\n    vector<int> bit;\n    int n;\n    BIT(int _n) {\n        n = _n;\n        bit.clear();\n        bit.resize(n + 2, 0);\n    }\n    \n    int getSmaller(int x) {\n        int totalSmaller = 0;\n        for(; x; x -= x&-x) {\n            totalSmaller += bit[x];\n        }\n        return totalSmaller;\n    }\n    void update(int x, int delta) {\n        for(; x <= n; x += x&-x)bit[x] += delta;\n    }\n};\n\nclass Solution {\n    \npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        oset<int> S;\n        for(int i = 0; i < nums.size(); i++){\n            nums[i] += 100001;\n        }\n        int Min = INT_MAX;\n        BIT fenTree(*max_element(nums.begin(), nums.end()));\n        vector<int> ans(nums.size());\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            Min = min(Min, nums[i]);\n            if(Min == nums[i]){\n                ans[i] = 0; \n                fenTree.update(nums[i], 1);\n                continue;\n            }\n            ans[i] = fenTree.getSmaller(nums[i] - 1);\n            fenTree.update(nums[i], 1);\n        }\n        return ans;\n    }\n};\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-smaller-numbers-after-self"}