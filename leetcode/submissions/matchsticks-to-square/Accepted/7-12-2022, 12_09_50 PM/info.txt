{"id":744923106,"lang":"cpp","time":"4Â weeks","timestamp":1657606190,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/744923106/","is_pending":"Not Pending","title":"Matchsticks to Square","memory":"10.1 MB","code":"class Solution {\nprivate:\n    bool canMake ( int index , int bucketsize , vector<int> &matchsticks , vector<int> &bucket){\n        // base case \n        if ( index == matchsticks.size()) \n            return bucket[0]==bucket[1] and bucket[1]==bucket[2] and bucket[2]==bucket[3] ;\n        \n        \n        // simple dfs backtrack \n        for ( int i = 0 ; i < 4 ; i ++ ){\n            if ( bucket[i] + matchsticks.at(index) > bucketsize) continue ;  \n            \n            \n            // concept of DP in optimization: if I have checked the same length before, \n            //why do I need to bother checking again?\n            //Although we only have 4 sides in a square, we can still \n            //check if we have encountered the same length with the current match. \n          \n            \n            int j = i ;\n            while ( --j >= 0) \n                if ( bucket[i] == bucket[j]) break;\n            \n            if ( j != -1 ) continue ;\n            \n            // noraml targetsum \n            bucket.at(i) += matchsticks.at(index);\n            if ( canMake ( index + 1 , bucketsize , matchsticks , bucket )) return true;\n            bucket.at(i) -= matchsticks.at(index);\n        }\n        \n        return false;\n    }\n    \npublic:\n    bool makesquare(vector<int>& matchsticks) {\n        // base case \n        int sum = 0 ;\n        \n        for ( int i : matchsticks) sum += i ;\n        if ( sum == 0 or sum % 4 ) return false;\n        \n        // we know that the side of the square will be atleast the max element of the match array\n        // sorting the array elements \n        sort( matchsticks.begin() , matchsticks.end() , greater<int>());\n        \n        // now i will make bucket of size sum / 4 \n        // and try all possibility to form that sum\n        vector<int> bucket(4, 0 );\n        return canMake( 0 , sum / 4 , matchsticks , bucket);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"matchsticks-to-square"}