{"id":746916759,"lang":"cpp","time":"3 weeks, 5 days","timestamp":1657802058,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/746916759/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int cntr = -1;\n    unordered_map<int, int> hashMap;\n    TreeNode* recur(int l, int r, vector<int>& preorder, vector<int>& inorder){\n        //cout << l <<\" \" << r <<\" \" << cntr << endl;\n        if(r < l)return NULL;\n        TreeNode *cur = new TreeNode();\n        cntr++;\n        if(cntr >= preorder.size())return NULL;\n        cur->val = preorder[cntr];\n        int a = hashMap[cur->val];\n        cur->left = recur(l, a - 1, preorder, inorder);\n        cur->right = recur(a + 1, r, preorder, inorder);\n        return cur;\n    }\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        \n        for(int i = 0; i < inorder.size(); i++){\n            hashMap[inorder[i]] = i;\n        }\n        \n        TreeNode* root = recur(0, preorder.size() - 1, preorder, inorder);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}