{"id":727504397,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1655807005,"status_display":"Accepted","runtime":"546 ms","url":"/submissions/detail/727504397/","is_pending":"Not Pending","title":"Furthest Building You Can Reach","memory":"96.4 MB","code":"\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\ntemplate<class T> using oset=tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\nclass Solution {\npublic:\n    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {\n        int n = heights.size();\n        oset<int> S; int cntr = 0;\n       \n        for(int i = 1; i < n; i++){\n            if(heights[i] <= heights[i - 1])continue;\n            \n            if(S.size() >= ladders){\n                auto it = S.find_by_order(S.size() - ladders);\n                int a;\n                if(it != S.end())a = *it;\n                else a = heights[i] - heights[i - 1];\n                //cout << a << endl;\n                if(a >= heights[i] - heights[i - 1]){\n                    bricks -= (heights[i] - heights[i - 1]);\n                }\n                else {\n                    bricks -= a;\n                    S.erase(it);\n                }\n            }\n            S.insert(heights[i] - heights[i - 1]);\n            if(bricks < 0)return i - 1;\n        }\n        return n - 1;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"furthest-building-you-can-reach"}