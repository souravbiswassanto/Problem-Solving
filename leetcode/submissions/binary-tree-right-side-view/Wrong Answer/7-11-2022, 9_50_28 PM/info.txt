{"id":744374341,"lang":"cpp","time":"4Â weeks","timestamp":1657554628,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/744374341/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        vector<int> v;\n        TreeNode* vat = new TreeNode(0, NULL, root);\n        \n        int level[100000];\n        memset(level, 0, sizeof level);\n        \n        function<void(TreeNode*, int)> recur =[&](TreeNode* poot, int lv){\n            if(poot == NULL)return;\n            if(poot != NULL and level[lv] == 0){\n                level[lv] = poot->val;\n            }\n            if(poot->right != NULL)recur(poot->right, lv + 1);\n            if(poot->left != NULL)recur(poot->left, lv + 1);\n        };\n        recur(root, 0);\n        int cnt = 0;\n        while(level[cnt]){\n            v.push_back(level[cnt++]);\n        }\n        return v;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view"}